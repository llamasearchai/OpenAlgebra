# Production-grade CI/CD pipeline for OpenAlgebra Medical AI
name: OpenAlgebra CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly builds
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Code quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Security audit
      uses: actions-rs/audit-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

  # Unit tests across platforms
  test:
    name: Test Suite
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        features: ["", "rayon", "benchmarks", "rayon benchmarks"]
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libopenblas-dev liblapack-dev libomp-dev
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install openblas lapack libomp
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run tests
      run: |
        if [ -n "${{ matrix.features }}" ]; then
          cargo test --features "${{ matrix.features }}"
        else
          cargo test
        fi
      shell: bash
    
    - name: Run integration tests
      run: |
        if [ -n "${{ matrix.features }}" ]; then
          cargo test --features "${{ matrix.features }}" --test comprehensive_tests
        else
          cargo test --test comprehensive_tests
        fi
      shell: bash

  # GPU acceleration tests (CUDA)
  test-gpu:
    name: GPU Tests
    runs-on: ubuntu-latest
    container:
      image: nvidia/cuda:11.8-devel-ubuntu20.04
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        apt-get update
        apt-get install -y curl build-essential pkg-config libssl-dev libopenblas-dev
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: gpu-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Test GPU features
      run: cargo test --features "gpu-acceleration" --lib
      env:
        CUDA_VISIBLE_DEVICES: ""  # No actual GPU in CI

  # MPI distributed computing tests
  test-mpi:
    name: MPI Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install MPI
      run: |
        sudo apt-get update
        sudo apt-get install -y libopenmpi-dev openmpi-bin libopenblas-dev
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: mpi-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Test MPI features
      run: cargo test --features "mpi" --lib

  # Benchmarks
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libopenblas-dev liblapack-dev libomp-dev
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: bench-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run benchmarks
      run: cargo bench --features "benchmarks"
    
    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'cargo'
        output-file-path: target/criterion/reports/index.html
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  # API integration tests
  test-api:
    name: API Integration Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libopenblas-dev liblapack-dev
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: api-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build server
      run: cargo build --release --bin openalgebra-server
    
    - name: Start server
      run: |
        ./target/release/openalgebra-server --host 127.0.0.1 --port 8080 &
        sleep 5
      env:
        RUST_LOG: info
    
    - name: Test API endpoints
      run: |
        # Health check
        curl -f http://127.0.0.1:8080/health
        
        # Create matrix
        curl -X POST http://127.0.0.1:8080/matrices \
          -H "Content-Type: application/json" \
          -d '{"name":"test","format":"csr","rows":3,"cols":3,"entries":[{"row":0,"col":0,"value":2.0},{"row":1,"col":1,"value":2.0},{"row":2,"col":2,"value":2.0}]}'
        
        # Solve system
        curl -X POST http://127.0.0.1:8080/matrices/test/solve \
          -H "Content-Type: application/json" \
          -d '{"matrix_name":"test","b":[1.0,1.0,1.0],"solver":"cg"}'

  # Python bindings tests
  test-python:
    name: Python Bindings
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libopenblas-dev liblapack-dev
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Build Python bindings
      run: |
        cd python
        python setup.py build_ext --inplace
    
    - name: Test Python bindings
      run: |
        cd python
        python -m pytest tests/ -v

  # Documentation
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: docs-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build documentation
      run: cargo doc --all-features --no-deps
    
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc

  # Docker builds
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [quality, test]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: openalgebra/openalgebra
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          ENABLE_GPU=false
          ENABLE_MPI=false

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Release
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [quality, test, test-api, docker]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libopenblas-dev liblapack-dev
    
    - name: Build release binaries
      run: |
        cargo build --release --all-features
        strip target/release/openalgebra-server
        strip target/release/openalgebra-benchmark
    
    - name: Create release archive
      run: |
        mkdir -p release
        cp target/release/openalgebra-server release/
        cp target/release/openalgebra-benchmark release/
        cp README.md LICENSE CHANGELOG.md release/
        tar -czf openalgebra-${{ github.ref_name }}-linux-x86_64.tar.gz -C release .
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          openalgebra-${{ github.ref_name }}-linux-x86_64.tar.gz
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}

  # Deployment to staging/production
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [release]
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://openalgebra.example.com
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Kubernetes
      run: |
        echo "Deploying to Kubernetes cluster..."
        # kubectl apply -f k8s/
        # Add actual deployment commands here
    
    - name: Update monitoring
      run: |
        echo "Updating monitoring dashboards..."
        # Add monitoring update commands here
    
             - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      if: always()