# OpenAlgebra Production Dockerfile
# Multi-stage build for optimized production deployment

# Build stage
FROM rust:1.70-bullseye as builder

# Install system dependencies
RUN apt-get update && apt-get install -y \
    cmake \
    build-essential \
    pkg-config \
    libssl-dev \
    libopenblas-dev \
    liblapack-dev \
    libomp-dev \
    python3 \
    python3-pip \
    python3-dev \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Install CUDA (optional, for GPU support)
ARG ENABLE_GPU=false
RUN if [ "$ENABLE_GPU" = "true" ]; then \
    wget https://developer.download.nvidia.com/compute/cuda/repos/debian11/x86_64/cuda-keyring_1.0-1_all.deb && \
    dpkg -i cuda-keyring_1.0-1_all.deb && \
    apt-get update && \
    apt-get install -y cuda-toolkit-11-8 && \
    rm cuda-keyring_1.0-1_all.deb; \
    fi

# Install MPI (optional, for distributed computing)
ARG ENABLE_MPI=false
RUN if [ "$ENABLE_MPI" = "true" ]; then \
    apt-get update && \
    apt-get install -y libopenmpi-dev openmpi-bin && \
    rm -rf /var/lib/apt/lists/*; \
    fi

# Set working directory
WORKDIR /app

# Copy dependency files
COPY Cargo.toml Cargo.lock ./
COPY build.rs ./

# Create dummy source to cache dependencies
RUN mkdir src && echo "fn main() {}" > src/main.rs
RUN cargo build --release && rm -rf src

# Copy source code
COPY src ./src
COPY tests ./tests
COPY benches ./benches
COPY examples ./examples

# Copy Python requirements
COPY requirements.txt requirements-dev.txt ./

# Install Python dependencies
RUN pip3 install --no-cache-dir -r requirements.txt

# Build the application with all features
ARG CARGO_FEATURES="rayon"
RUN if [ "$ENABLE_GPU" = "true" ]; then CARGO_FEATURES="$CARGO_FEATURES gpu-acceleration"; fi
RUN if [ "$ENABLE_MPI" = "true" ]; then CARGO_FEATURES="$CARGO_FEATURES mpi"; fi
RUN cargo build --release --features "$CARGO_FEATURES"

# Build C++ components if present
COPY CMakeLists.txt ./
COPY cmake ./cmake
RUN if [ -f CMakeLists.txt ]; then \
    mkdir build && cd build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release \
             -DENABLE_GPU=$ENABLE_GPU \
             -DENABLE_MPI=$ENABLE_MPI && \
    make -j$(nproc); \
    fi

# Run tests to validate build
RUN cargo test --release --features "$CARGO_FEATURES"

# Production stage
FROM debian:bullseye-slim as production

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    libssl1.1 \
    libopenblas0 \
    liblapack3 \
    libomp5 \
    python3 \
    python3-pip \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Install MPI runtime (if enabled)
ARG ENABLE_MPI=false
RUN if [ "$ENABLE_MPI" = "true" ]; then \
    apt-get update && \
    apt-get install -y libopenmpi3 && \
    rm -rf /var/lib/apt/lists/*; \
    fi

# Install CUDA runtime (if enabled)
ARG ENABLE_GPU=false
RUN if [ "$ENABLE_GPU" = "true" ]; then \
    apt-get update && \
    apt-get install -y cuda-runtime-11-8 && \
    rm -rf /var/lib/apt/lists/*; \
    fi

# Create application user
RUN groupadd -r openalgebra && useradd -r -g openalgebra openalgebra

# Set working directory
WORKDIR /app

# Copy built binaries
COPY --from=builder /app/target/release/openalgebra-server ./bin/
COPY --from=builder /app/target/release/openalgebra-benchmark ./bin/

# Copy C++ libraries if built
COPY --from=builder /app/build/lib* ./lib/ 2>/dev/null || true

# Copy Python requirements and install
COPY --from=builder /app/requirements.txt ./
RUN pip3 install --no-cache-dir -r requirements.txt

# Copy configuration files
COPY config ./config
COPY docker-compose.yml ./

# Create necessary directories
RUN mkdir -p logs data temp && \
    chown -R openalgebra:openalgebra /app

# Set environment variables
ENV RUST_LOG=info
ENV OPENALGEBRA_CONFIG_PATH=/app/config
ENV OPENALGEBRA_DATA_PATH=/app/data
ENV OPENALGEBRA_LOG_PATH=/app/logs

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Expose ports
EXPOSE 8080 8081

# Switch to application user
USER openalgebra

# Default command
CMD ["./bin/openalgebra-server", "--host", "0.0.0.0", "--port", "8080"]

# Labels for metadata
LABEL maintainer="Nik Jois <nikjois@llamasearch.ai>"
LABEL version="1.0.0"
LABEL description="OpenAlgebra: High-Performance Sparse Linear Algebra Library"
LABEL org.opencontainers.image.source="https://github.com/llamasearchai/OpenAlgebra"
LABEL org.opencontainers.image.documentation="https://docs.rs/openalgebra"
LABEL org.opencontainers.image.licenses="MIT" 